<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--********************************************配置hibernate********************************************-->

    <!--扫描配置文件(datasource.properties)-->
    <context:property-placeholder location="classpath:/datasource.properties" />

    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />  <!--数据库连接驱动-->
        <property name="jdbcUrl" value="${jdbc.url}" />     <!--数据库地址-->
        <property name="user" value="${jdbc.username}" />   <!--用户名-->
        <property name="password" value="${jdbc.password}" />   <!--密码-->
        <property name="maxPoolSize" value="40" />      <!--最大连接数-->
        <property name="minPoolSize" value="1" />       <!--最小连接数-->
        <property name="initialPoolSize" value="10" />      <!--初始化连接池内的数据库连接-->
        <property name="maxIdleTime" value="20" />  <!--最大空闲时间-->
    </bean>

    <!--配置session工厂-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.zjx.firsthibernate.pojo" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> <!--hibernate根据实体自动生成数据库表-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>   <!--指定数据库方言-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     <!--在控制台显示执行的数据库操作语句-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>     <!--在控制台显示执行的数据库操作语句（格式）-->

                <prop key="hibernate.generate_statistics">true</prop>     <!-- Hibernate将收集有助于性能调节的统计数据 -->
                <!--开启上下文的session-->
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
    </bean>


    <!--事务管理的开始-->
    <!-- 事务管理器配置  -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 使用事务的方式一 注解式声明，只要在对应的类上面加入@Transactional注解，就是使用事务了，但是：@Transactional 注解只能应用到 public 方法才有效。-->
    <!-- 使用@Transactional进行声明式事务管理需要声明下面这行 -->
    <!--   <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>  -->     <!--开启事务-->

    <!-- 使用事务的方式二 切面式声明-->
    <!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="*" propagation="REQUIRED" />
           <!-- <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />-->
        </tx:attributes>
    </tx:advice>

    <!-- AOP切面 -->
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* *..service..*(..))" />
       <!-- <aop:pointcut id="txPointcut" expression="execution(* com.zjx.firsthibernate.base.dao..*(..))" />-->
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
    </aop:config>
    <!--事务管理的结束-->

<!--      1、execution(): 表达式主体 (必须加上execution)。
     2、第一个*号：表示返回值类型，*号表示所有的类型。
     3、包名：表示需要拦截的包名，后面的两个句点..表示当前包和当前包的所有子包，com.zjx.firsthibernate.service包、子孙包下所有类的方法。
     4、第二个*号：表示类名，*号表示所有的类。
     5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。
    execution(* com.zjx.firsthibernate.service..*.*(..))可改为execution(* *..service..*.*(..))  *..service..表示包名，其中拦截包含service的包
    -->
</beans>